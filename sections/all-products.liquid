<style>
    all-products {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
    }

    all-products .grid{
        width: 100%;
        display: grid;
        grid-template-columns: repeat(var(--items-per-row), 1fr);
        gap: 16px;
    }
</style>

{%  assign remainingProducts = "" %}
{% for product in collections.all.products offset: section.settings.products_per_row %}
    {% assign remainingProducts = remainingProducts | append: product.handle %}

    {% unless forloop.last %}
        {% assign remainingProducts = remainingProducts | append: ',' %}
    {% endunless %}
{% endfor %}

<div 
    class="page-width custom"
    data-remaining-products="{{ remainingProducts }}"
    data-products-per-row="{{ section.settings.products_per_row }}"
>
    <all-products>
        <div class="grid" style="--items-per-row: {{ section.settings.products_per_row }}">
            {% for product in collections.all.products limit: section.settings.products_per_row %}
                {% render 'card-product', card_product: product %}
            {% endfor %}
        </div>  
        <button class="button">Load More</button>
    </all-products>
</div>

<script>
    class AllProducts extends HTMLElement {
        index = 0;

        constructor() {
            super();
            this.loadMoreButton = this.querySelector('button');
            this.productsPerRow = Number.parseInt(document.querySelector('.page-width.custom').dataset.productsPerRow);
            this.remainingProducts = document.querySelector('.page-width.custom').dataset.remainingProducts.split(',');
            this.grid = this.querySelector('.grid');

            this.loadMoreButton.addEventListener('click', this.loadMoreProducts.bind(this));
        }

        async loadMoreProducts(){
            this.loadMoreButton.disabled = true;
            const productsToLoad = this.remainingProducts.slice(this.index, this.index + this.productsPerRow);

            const products = await Promise.all(
                productsToLoad.map(async (productHandle) => {
                    const response = await fetch(`/products/${productHandle}?sections=card-product`);
                    const data = await response.json();
                    return data['card-product'];
                })
            );

            products.forEach(product => {
                this.grid.innerHTML += product;
            });

            this.index += this.productsPerRow;

            if (this.index >= this.remainingProducts.length) {
                this.loadMoreButton.remove();
            } else{
                this.loadMoreButton.disabled = false;
            }
        }
    }

    customElements.define('all-products', AllProducts);
</script>

{%  schema  %} 
{
    "name": "All Products",
    "settings": [
        {
            "type": "number",
            "id": "products_per_row",
            "label": "Products per row"
        }
    ],
    "presets": [
        {
            "name": "All Products"
        }
    ]
}
{% endschema %}